if (typeof jQuery !== 'undefined') {
	(function($) {
		$('#spinner').ajaxStart(function() {
			$(this).fadeIn();
		}).ajaxStop(function() {
			$(this).fadeOut();
		});
	})(jQuery);
}

// Avoid 'console' errors in browsers that lack a console.
(function() {
    var method;
    var noop = function () {};
    var methods = [
        'assert', 'clear', 'count', 'debug', 'dir', 'dirxml', 'error',
        'exception', 'group', 'groupCollapsed', 'groupEnd', 'info', 'log',
        'markTimeline', 'profile', 'profileEnd', 'table', 'time', 'timeEnd',
        'timeStamp', 'trace', 'warn'
    ];
    var length = methods.length;
    var console = (window.console = window.console || {});

    while (length--) {
        method = methods[length];

        // Only stub undefined methods.
        if (!console[method]) {
            console[method] = noop;
        }
    }
}());

var GLOBAL = function() {
    constants = {};
    return {
        defineConstant: function(key, value) {
            if (constants[key]) {
                console.warn("Redeclaration of constant is Not Allowed");
                return false;
            }
            constants[key] = value;
            return true;
        },
        getValue: function(key) {
            if (!constants[key]) {
                console.warn("Constant \'" + key + "\' doesn't exist.");
                return false;
            }
            return constants[key];
        }
    }
}();

var ie; //set to global variable. Allow checking of IE version.
var isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') > -1;

// To disable firefox "Back-Forward Cache(bfcache)"
// More info https://developer.mozilla.org/en-US/docs/Using_Firefox_1.5_caching
// Must not be included in $jQuery.ready()
if (isFirefox) {
    window.onunload = function() {};
}

$(document).ready(function() {
    noBack();
    ie = checkIE();

    if (ie < 7) {
        $('#browser-compability > p').show();
    }

    dropdownFix()
    disableInputWhitespace();
    limitAmountDecimal();
    singleClickOnly();
});

function checkIE() {
    // ----------------------------------------------------------
    // A short snippet for detecting versions of IE in JavaScript
    // without resorting to user-agent sniffing
    // ----------------------------------------------------------
    // If you're not in IE (or IE version is less than 5) then:
    //     ie === undefined
    // If you're in IE (>=5) then you can determine which version:
    //     ie === 7; // IE7
    // Thus, to detect IE:
    //     if (ie) {}
    // And to detect the version:
    //     ie === 6 // IE6
    //     ie > 7 // IE8, IE9 ...
    //     ie < 9 // Anything less than IE9
    // ----------------------------------------------------------
    // checkIE() will return IE version
    //-----------------------------------------------------------
    var undef,
        v = 3,
        div = document.createElement('div'),
        all = div.getElementsByTagName('i');

    while (
        div.innerHTML = '<!--[if gt IE ' + (++v) + ']><i></i><![endif]-->',
        all[0]
    );

    return v > 4 ? v : undef;
}

function disableInputWhitespace() {
    $('.disable-whitespace').each(function() {
        $(this).on('keydown', function(e) {
            return e.which !== 32;
        })
    });
}

function limitAmountDecimal() {
    $('.limit-amount-dec').each(function() {
        $(this).bind('paste', function() {
            var self = this;
            setTimeout(function () {
                if (!/^\d*(\.\d{1,2})+$/.test($(self).val())) $(self).val('');
            }, 0);
        })

        $(this).keypress(function (e) {
            var character = String.fromCharCode(e.keyCode)
            var newValue = this.value + character;
            if (isNaN(newValue) || hasDecimalPlace(newValue, 3)) {
                e.preventDefault();
                return false;
            }
        });
    });

    function hasDecimalPlace(value, x) {
        var pointIndex = value.indexOf('.');
        return  pointIndex >= 0 && pointIndex < value.length - x;
    }
}

function singleClickOnly() {
    $('.form-confirmation').submit(function() {
        var blockUIWhenFormSubmit = $('#blockUIWhenFormSubmit').val();
        if (blockUIWhenFormSubmit != 'false') {
            $('input[type=submit], button[type=submit]').attr('disabled', 'disabled');
        }
    });
}

function noBack() {
    logOut();
    setBack();
}

function setBack() {
    $('#--bAcKButtoN--').val('.');
}

function logOut() {
    var back = $('#--bAcKButtoN--').val();
    if (typeof back != 'undefined' && back != '') {
        window.location.href = GLOBAL.getValue('LOGOUT');
    }
}

function dropdownFix() {
    // ----- 3rd level dropdown fix
    $('.dropdown-menu [data-toggle=dropdown]').on('click', function(event) {
        // Avoid following the href location when clicking
        event.preventDefault();
        // Avoid having the menu to close when clicking
        event.stopPropagation();
        // If a menu is already open we close it
        $('.dropdown-menu [data-toggle=dropdown]').parent().removeClass('open');
        // opening the one you clicked on
        $(this).parent().addClass('open');

        var menu = $(this).parent().find("ul");
        var menupos = menu.offset();

        if((menupos.left + menu.width()) > $(window).width()) {
          var newpos = - $(menu).width();
        }
        menu.css({ left:newpos });
    });
    // ----- 3rd level dropdown fix
}

/*! http://mths.be/placeholder v2.0.7 by @mathias */
;(function(window, document, $) {

        var isInputSupported = 'placeholder' in document.createElement('input');
        var isTextareaSupported = 'placeholder' in document.createElement('textarea');
        var prototype = $.fn;
        var valHooks = $.valHooks;
        var propHooks = $.propHooks;
        var hooks;
        var placeholder;

        if (isInputSupported && isTextareaSupported) {

                placeholder = prototype.placeholder = function() {
                        return this;
                };

                placeholder.input = placeholder.textarea = true;

        } else {

                placeholder = prototype.placeholder = function() {
                        var $this = this;
                        $this
                                .filter((isInputSupported ? 'textarea' : ':input') + '[placeholder]')
                                .not('.placeholder')
                                .bind({
                                        'focus.placeholder': clearPlaceholder,
                                        'blur.placeholder': setPlaceholder
                                })
                                .data('placeholder-enabled', true)
                                .trigger('blur.placeholder');
                        return $this;
                };

                placeholder.input = isInputSupported;
                placeholder.textarea = isTextareaSupported;

                hooks = {
                        'get': function(element) {
                                var $element = $(element);

                                var $passwordInput = $element.data('placeholder-password');
                                if ($passwordInput) {
                                        return $passwordInput[0].value;
                                }

                                return $element.data('placeholder-enabled') && $element.hasClass('placeholder') ? '' : element.value;
                        },
                        'set': function(element, value) {
                                var $element = $(element);

                                var $passwordInput = $element.data('placeholder-password');
                                if ($passwordInput) {
                                        return $passwordInput[0].value = value;
                                }

                                if (!$element.data('placeholder-enabled')) {
                                        return element.value = value;
                                }
                                if (value == '') {
                                        element.value = value;
                                        // Issue #56: Setting the placeholder causes problems if the element continues to have focus.
                                        if (element != safeActiveElement()) {
                                                // We can't use `triggerHandler` here because of dummy text/password inputs :(
                                                setPlaceholder.call(element);
                                        }
                                } else if ($element.hasClass('placeholder')) {
                                        clearPlaceholder.call(element, true, value) || (element.value = value);
                                } else {
                                        element.value = value;
                                }
                                // `set` can not return `undefined`; see http://jsapi.info/jquery/1.7.1/val#L2363
                                return $element;
                        }
                };

                if (!isInputSupported) {
                        valHooks.input = hooks;
                        propHooks.value = hooks;
                }
                if (!isTextareaSupported) {
                        valHooks.textarea = hooks;
                        propHooks.value = hooks;
                }

                $(function() {
                        // Look for forms
                        $(document).delegate('form', 'submit.placeholder', function() {
                                // Clear the placeholder values so they don't get submitted
                                var $inputs = $('.placeholder', this).each(clearPlaceholder);
                                setTimeout(function() {
                                        $inputs.each(setPlaceholder);
                                }, 10);
                        });
                });

                // Clear placeholder values upon page reload
                $(window).bind('beforeunload.placeholder', function() {
                        $('.placeholder').each(function() {
                                this.value = '';
                        });
                });

        }

        function args(elem) {
                // Return an object of element attributes
                var newAttrs = {};
                var rinlinejQuery = /^jQuery\d+$/;
                $.each(elem.attributes, function(i, attr) {
                        if (attr.specified && !rinlinejQuery.test(attr.name)) {
                                newAttrs[attr.name] = attr.value;
                        }
                });
                return newAttrs;
        }

        function clearPlaceholder(event, value) {
                var input = this;
                var $input = $(input);
                if (input.value == $input.attr('placeholder') && $input.hasClass('placeholder')) {
                        if ($input.data('placeholder-password')) {
                                $input = $input.hide().next().show().attr('id', $input.removeAttr('id').data('placeholder-id'));
                                // If `clearPlaceholder` was called from `$.valHooks.input.set`
                                if (event === true) {
                                        return $input[0].value = value;
                                }
                                $input.focus();
                        } else {
                                input.value = '';
                                $input.removeClass('placeholder');
                                input == safeActiveElement() && input.select();
                        }
                }
        }

        function setPlaceholder() {
                var $replacement;
                var input = this;
                var $input = $(input);
                var id = this.id;
                if (input.value == '') {
                        if (input.type == 'password') {
                                if (!$input.data('placeholder-textinput')) {
                                        try {
                                                $replacement = $input.clone().attr({ 'type': 'text' });
                                        } catch(e) {
                                                $replacement = $('<input>').attr($.extend(args(this), { 'type': 'text' }));
                                        }
                                        $replacement
                                                .removeAttr('name')
                                                .data({
                                                        'placeholder-password': $input,
                                                        'placeholder-id': id
                                                })
                                                .bind('focus.placeholder', clearPlaceholder);
                                        $input
                                                .data({
                                                        'placeholder-textinput': $replacement,
                                                        'placeholder-id': id
                                                })
                                                .before($replacement);
                                }
                                $input = $input.removeAttr('id').hide().prev().attr('id', id).show();
                                // Note: `$input[0] != input` now!
                        }
                        $input.addClass('placeholder');
                        $input[0].value = $input.attr('placeholder');
                } else {
                        $input.removeClass('placeholder');
                }
        }

        function safeActiveElement() {
                // Avoid IE9 `document.activeElement` of death
                // https://github.com/mathiasbynens/jquery-placeholder/pull/99
                try {
                        return document.activeElement;
                } catch (err) {}
        }

}(this, document, jQuery));

