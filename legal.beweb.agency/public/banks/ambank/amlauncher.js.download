/*global b$, gadgets, bd, window, jQuery, require */

(function(b$, gadgets, bd, $) {
    'use strict';

    //set locale
    var defaultLang = "en-MY";

    $.ajax({
        url: b$.portal.config.serverRoot+"/services/v1/language",
        type: "GET",
        cache: false,
        success: function (data, textStatus) {
            defaultLang = data;
            languageLoaded();
        },
        error: function (request, status, error) {
            languageLoaded();
        }
    });

    function languageLoaded(){
        launchpad.i18n = {
            mergedFiles: false,
            path: launchpad.staticRoot + '/features/[BBHOST]/config/i18n'
            // path: b$.portal.config.serverRoot+"/content/bbp/repositories/contentRepository?path=/locale"
        };
        document.getElementsByTagName("html")[0].setAttribute("lang", defaultLang);
    }

    // b$.view.url2state.active = false;

    var EVENT_NOTIFY_PANEL_OPEN = 'lp-launcher-panel-open';
    var EVENT_NOTIFY_PANEL_CLOSE = 'lp-launcher-panel-close';

    // var EVENT_PANEL_LOADED = 'DeckPanelLoaded';
    var EVENT_CONTEXT_CHANGED = 'launchpad-retail.activeContextChanged';

    var EVENT_TOGGLE_MENU = 'launchpad-retail.toggleLauncherMenu';
    var EVENT_START_TOGGLE_MENU = 'launchpad-retail.startupToggleLauncherMenu';
    var EVENT_CLOSE_ACTIVE_PANEL = 'launchpad-retail.closeActivePanel';
    var EVENT_SET_OFFSET = 'launchpad-retail.offsetTopCorrection';
    var EVENT_ADD_NOTIFICATION = 'launchpad.add-notification';

    var EVENT_PANEL_OPEN = 'ambank.openPanel';
    var EVENT_PANEL_CLOSE = 'ambank.closePanel';
	var EVENT_USER_ACTIVITY = 'ambank-notifyUserActivity';
    var EVENT_CURRENT_PANEL = 'ambank.currentPanel'
    var EVENT_TRIGGER_BEHAVIOR_DETECTION = 'ambank.trigger-behavior-detection';
    var EVENT_GA_PAGE = 'ambank.analyticsPage';
    var EVENT_GA_EVENT = 'ambank.analyticsEvent';
    var EVENT_GA_TIMING = 'ambank.analyticsTiming';

    var previousPanel, currentPanel;
    var panelsToHideFromNonePilot = [];

    /**
     * Checks if element is editable or form element
     * @param  {HTMLElement} inspected element
     * @return {Boolean}
     */
    var isEditable = function(el) {
        var tagName = el.tagName.toLowerCase();
        var editable = el.getAttribute('contenteditable');
        return editable || ['input', 'textarea', 'select', 'button', 'label'].indexOf(tagName) > -1;
    };

    var isSmallDevice = function() {
        return (window.innerWidth <= 849)
    }


    /**
     * <p>Returns true if:
     * <ol>
     *  <li>the value is a boolean and true<br>
     *  <li>the value is a number and not 0<br>
     *  <li>the value is a string and equal to 'true' (after trimming and ignoring case)
     * </ol>
     * @memberOf util
     * @param {*} val The value to parse
     * @return {boolean} A boolean value depending on the parsing result
     */
    var parseBoolean = function(val) {
        return (typeof val === 'boolean' && val) ||
            (typeof val === 'string' && /\s*true\s*/i.test(val)) ||
            (typeof val === 'number' && val !== 0);
    };

    //start browser version used checking
    var browserCompatibility = function(){
        var ua= navigator.userAgent, tem, 
        M= ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || [];
        if(/trident/i.test(M[1])){
            tem=  /\brv[ :]+(\d+)/g.exec(ua) || [];
            return 'IE '+(tem[1] || '');
        }
        if(M[1]=== 'Chrome'){
            tem= ua.match(/\b(OPR|Edge)\/(\d+)/);
            if(tem!= null) return tem.slice(1).join(' ').replace('OPR', 'Opera');
        }
        M= M[2]? [M[1], M[2]]: [navigator.appName, navigator.appVersion, '-?'];
        if((tem= ua.match(/version\/(\d+)/i))!= null) M.splice(1, 1, tem[1]);
        
        var browserLink = {
            IE: "https://www.microsoft.com/en-us/download/internet-explorer.aspx",
            MSIE: "https://www.microsoft.com/en-us/download/internet-explorer.aspx",
            OPERA: "http://www.opera.com/download",
            CHROME: "https://www.google.com/chrome/browser/desktop/",
            MOZILLA: "https://www.mozilla.org/en-US/firefox/new/",
            SAFARI: "https://support.apple.com/downloads/safari"
        }


        $("#getLatestBrowser").attr("href", browserLink[M[0].toUpperCase()]);

        if((M[0].toUpperCase() == "IE" || M[0].toUpperCase() == "MSIE") && parseInt(M[1]) < 11)
            return false;
        else if((M[0].toUpperCase() == "CHROME") && parseInt(M[1]) < 49)
            return false
        else if((M[0].toUpperCase() == "MOZILLA" || M[0].toUpperCase() == "FIREFOX") && parseInt(M[1]) < 54)
            return false
        else if((M[0].toUpperCase() == "SAFARI") && parseInt(M[1]) < 5)
            return false
        else
            return true;
    };
    //end 

    //start is mobile
    var isMobileDevice = function(){
        var isMobileDevice = false;
        var ua= navigator.userAgent;
        if (ua == 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.151 Safari/535.19'){
            isMobileDevice = false;
        }else if(ua == 'Mozilla/5.0 (iPhone; U; CPU like Mac OS X; en) AppleWebKit/420+ (KHTML, like Gecko) Version/3.0 Mobile/1A543 Safari/419.3'){
            isMobileDevice = true;
        }else if(ua == 'Mozilla/5.0 (Linux; <Android Version>; <Build Tag etc.>) AppleWebKit/<WebKit Rev> (KHTML, like Gecko) Chrome/<Chrome Rev> Mobile Safari/<WebKit Rev>'){
            isMobileDevice = true;
        }else if(ua == 'Mozilla/5.0 (compatible; MSIE 9.0; Windows Phone OS 7.5; Trident/5.0; IEMobile/9.0)'){
            isMobileDevice = true;
        }else if(ua == 'Opera/9.80 (J2ME/MIDP; Opera Mini/9.80 (S60; SymbOS; Opera Mobi/23.348; U; en) Presto/2.5.25 Version/10.54'){
            isMobileDevice = true;
        }else if(launchpad.mobileSDK){
            isMobileDevice = true;
        }
        return isMobileDevice;
    };    
    //end 

    var DeckContainer = b$.bdom.getNamespace('launchpad').getClass('DeckContainer');

    //  ----------------------------------------------------------------
    DeckContainer.extend(function(bdomDocument, node) {
        DeckContainer.apply(this, arguments);
        this.isPossibleDragTarget = false;
    }, {
        localName: 'AmLauncherDeckContainer',
        namespaceURI: 'launchpad',

        /**
         * Sets up the container by creating 2 initial panels inside the container
         * @constructor
         */
        DOMReady: function(ev) {
            if(!browserCompatibility()){
                $("#browserNotSupported").addClass("in");

                $("#getLatestBrowser").mousedown(function() {
                     $("#getActive").css("display", "block");
                     $("#getNormal").css("display", "none");
                     $("#getHover").css("display", "none");
                });

                $("#getLatestBrowser").mouseover(function() {
                     $("#getHover").css("display", "block");
                     $("#getNormal").css("display", "none");
                });

                $("#getLatestBrowser").mouseout(function() {
                     $("#getHover").css("display", "none");
                     $("#getActive").css("display", "none");
                     $("#getNormal").css("display", "block");
                });
            }else{
                $("#browserNotSupported").remove();
            }

            var initialized = parseBoolean(this.getPreference('initialized'));

            if (!initialized) {
                // Initialize Launcher Container
                this._initialize(ev);
            } else {
                // Initialize Deck Container
                DeckContainer.prototype.DOMReady.call(this, ev);
                this._addHandlers();
            }

            this._loadHandler();
        },


        _initialize: function() {
            var defaultPanelName = this._getNewPanelName();
            this.setPreference('initialized', true);
            this.setPreference('defaultPanel', defaultPanelName);
            this.model.save();

            // Add 2 initial panels
            this.addPanel(this._getNewPanelData({
                id: defaultPanelName,
                order: '0',
                panel: 'mainhidden',
                title: 'Default panel',
                loadChildren: 'true',
                sidePanelPosition: 'middle',
                reloadContent: 'false',
                fullPanel: 'false'
            }));

            this.addPanel(this._getNewPanelData({ order: '1' }));
        },


        /**
         * Add launcher handlers
         */
        _addHandlers: function() {
            var self = this;
            var UI = this._getUI();
            this.dir = document.dir || document.getElementsByTagName('html')[0].getAttribute('dir');

            require(['hammerjs'], function(Hammer) {

                // Enable mobile-device events
                if (typeof Hammer !== 'undefined' && !bd.designMode && ('ontouchstart' in window)) {
                    var element = document.body;
                    var eventType = 'swipe';
                    var mc = $(element).data('touch');
                    if (!mc) {
                        mc = new Hammer(element, {
                            'swipe_velocity': 0.4
                        });
                        $(element).data('touch', mc);
                    }
                    mc.on(eventType, self._swipeHandler.bind(self));
                }
            });

            UI.container.on('click', '.lp-launcher-tab>a', $.proxy(this, '_disableLink'));
            UI.container.on('click', '[data-action="lp-tab-open"]', $.proxy(this, '_tabClickHandler'));
            UI.container.on('click', '[data-action="lp-tab-hide"]', $.proxy(this, '_closeActivePanel'));

            gadgets.pubsub.subscribe(EVENT_TOGGLE_MENU, $.proxy(this, '_toggleLauncherMenu'));
            gadgets.pubsub.subscribe(EVENT_CLOSE_ACTIVE_PANEL, $.proxy(this, '_closeActivePanel'));
            gadgets.pubsub.subscribe(EVENT_SET_OFFSET, $.proxy(this, '_offsetTopCorrection'));
            gadgets.pubsub.subscribe(EVENT_ADD_NOTIFICATION, $.proxy(this, '_sessionHandler'));
            // gadgets.pubsub.subscribe(EVENT_GA_PAGE, $.proxy(this, '_analyticsPage'));
            gadgets.pubsub.subscribe(EVENT_GA_EVENT, $.proxy(this, '_analyticsEvent'));
            gadgets.pubsub.subscribe(EVENT_GA_TIMING, $.proxy(this, '_analyticsTiming'));
            gadgets.pubsub.subscribe(EVENT_CURRENT_PANEL, $.proxy(this, '_getCurrentPanel'));
            
			$(document).on('click touchend keyup',$.proxy(this, '_activityHandler'));
            $(document).on('contextmenu',$.proxy(this, '_contextmenu'));
            $(window).resize($.proxy(this, 'setContainerHeight'));
        },

        //start Google Analaytics

        _analyticsTiming: function (_data) {
            var _context = _data.context, 
                _timingValue = _data.value;

            if(_context === undefined || _context === null){
                return;
            }

            console.log("_analyticsTiming: ", _data);
             ga('send', {    //Code to send UserTiming
                'hitType': 'timing',
                'timingCategory': _context,
                'timingVar': 'load',
                'timingValue': _timingValue,
                //'timingLabel': 'idleTime'
            });      
        },


        _analyticsEvent: function (_data) {
            var _context = _data.context, 
                _label =_data.label,
                _action = _data.action;

            if(_context === undefined || _context === null){
                return;
            }

            
            console.log("_analyticsEvent: ", _data);
            ga('send', {
                'hitType': 'event', // Required.
                'eventCategory': _context, // Required.
                'eventAction': _action == undefined? 'click': _action, // Required.
                'eventLabel': _label == undefined? '': _label,    
            });

            var timingDate= new Date();
            var previousTimingDate= localStorage.getItem("timingDate");
            if(previousTimingDate==null){
                // Store data
                localStorage.setItem("timingDate", timingDate.getTime());

            } else{
                previousTimingDate = new Date(parseInt(previousTimingDate));                      
                var timingResult= timingDate.getTime() - previousTimingDate.getTime();
                
                localStorage.setItem("timingDate", timingDate.getTime());
                gadgets.pubsub.publish('ambank.analyticsTiming', {
                    context: _context,
                    value: timingResult    
                });
            }


        },
        //end        

        _getCurrentPanel: function(_callback){
            _callback(currentPanel);
        },

        _loadHandler: function(){
            var usergrp = b$.portal.loggedInUserGroup;
            var isLoggedIn = usergrp.indexOf('user') > -1 ? true : false;

            if(isLoggedIn){
                var isFirstLoad = localStorage.getItem('isFirstLoad');
                
                try{
                    window.onpopstate =  function(event) {
                        window.history.forward();
                    };

                    window.history.pushState({state:'new'},'AmBank Online', window.location.href);
                }catch(err){
                    console.log("pushstate not supported");
                }

                if(isFirstLoad == null){
                    localStorage.setItem('isFirstLoad', true);
                }else{
                    localStorage.setItem('isFirstLoad', false);
                    setTimeout(function(){
                        // wait until widget loaded then force logout
                        // var logoutJson = [{
                        //     type: 'danger',
                        //     msg: 'AmBank Online not allowing refresh'
                        // }];
                        var logoutJson = "AmBank Online not allowing refresh."

                        localStorage.setItem("ambRefreshTokenError", JSON.stringify(logoutJson));

                        gadgets.pubsub.publish("amb.logout");
                    }, 0);
                }
            }else{
                var htmlNode = $(this.htmlNode);
                htmlNode.removeClass('lp-launcher-left');
                localStorage.removeItem('isFirstLoad');
            }
        },

        _contextmenu: function(ev) {
            return false;
        },

		_activityHandler: function(ev) {
			gadgets.pubsub.publish(EVENT_USER_ACTIVITY,  Date.now());	
		},

		_offsetTopCorrection: function(offset){
			// if(offset && offset.offsetTopCorrection){
			// 	$(this.htmlNode).css({
			// 		'margin-top': offset.isStatic ? '' : offset.offsetTopCorrection
			// 	});
			// }
		},

        _notifyChildren: function(eventName, panel) {
            function notifyChildren(vc) {
                $.each(vc.childNodes || [], function() {
                    if (this.childNodes && this.childNodes.length) {
                        notifyChildren(this);
                    } else {
                        this.dispatchCustomEvent(eventName, panel);
                    }
                });

            }
            if (panel) {
                notifyChildren(panel);
            }
        },

        _swipeHandler: function(ev) {
            var eventType = ev.type;
            var dir = ev.direction;
            // prevent left/right swipes from scrolling page
            ev.preventDefault();

            // Check both LTR and RTL
            if (eventType === 'swipe' && (dir === 4 || dir === 2)) {
                var toggleClass = (dir === 4 && this.dir === 'ltr' || dir === 2 && this.dir === 'rtl');
                var tempThis = this;
                this._getCurrentPanel(function(currPanel){
                    if(currPanel != undefined && currPanel.length > 0 && currPanel != "widget-amb-login"){
                        tempThis._toggleLauncherMenu(toggleClass);
                    }
                });
            }
        },


        _tabClickHandler: function(ev) {
            var currentTarget = $(ev.currentTarget);
            if (!currentTarget.hasClass('external-link')) {
                ev.preventDefault();

                var id = currentTarget.closest('[data-panel]').data('panel') || 0;
                var isLoginTab = (currentTarget.closest('.am-launcher-tab').length > 0);
                this.handleTab(currentTarget, true);
                this.showPanel(id, true);

                if (isSmallDevice) {
                    if (isLoginTab) {
                        previousPanel = '';
                        return;
                    }
                    gadgets.pubsub.publish(EVENT_PANEL_OPEN);
                }
            }
        },

        /**
         * Lazy loading for panels + enable design tools in the CXP Manager
         * @param  {object} panel object
         */
        _loadChildren: function(panel) {
            // enable design tools recursively
            function enableTools(item) {
                if (bd && bd.designMode && item && item.showDesignTools) {
                    item.showDesignTools();
                    $.each(item.childNodes || [], function() {
                        enableTools(this);
                    });
                }
            }

            if (panel && panel.loadChildren) {
                panel.loadChildren(null, enableTools);
            }
        },

        /**
         * make sure user will see sidebar with login screen after get logged out
         * @param  {object} pubsub message
         */
        _sessionHandler: function(data) {
            if (data && data.notification && data.notification.id === 'session-expired') {
                this._toggleLauncherMenu(true);
            }
        },


        _getUI: function() {
            var container = $(this.htmlNode),
                content = this.getDisplay('content');

            this._ui = {
                container: container,
                main: this.getDisplay('main'),
                left: this.getDisplay('left'),
                content: content,
                areas: $(content).children('.lp-launcher-area')
            };

            return this._ui;
        },


        refreshHTML: function(callback, errCallback) {
            this._hideOverlay();
            // var t1 = new Date().getTime();
            $(this.htmlNode).addClass('lp-lc-refresh');
            DeckContainer.prototype.refreshHTML.call(this, function(bres, res) {
                // var t2 = new Date().getTime();
                // console.log('refreshed',  t2 - t1, 'ms');
                if (typeof callback === 'function') {
                    callback(bres, res);
                }
            }, errCallback);
        },

        _getDefaultPanel: function() {
            var defaultPanel = this.getPreference('defaultPanel');
            // check if element is extended from the Masterpage
            var name = this.model && this.model.name.split('~');
            return this.getPanel(defaultPanel + (name.length === 2 ? '~' + name[1] : ''));
        },

        _toggleTab: function(tab, toggle) {
            var UI = this._getUI();
            var $tab = $(tab);
            var panel = tab && this.getPanel($tab.data('panel'));
            var $tabs = $tab.parent().length == 0? $(".am-mobile-wrapper ul>li") : $(">li", $tab.parent());
            var fn = function($el, val) {
                var usergrp = b$.portal.loggedInUserGroup;
                var isLoggedIn = usergrp.indexOf('user') > -1 ? true : false;

                var queryTab = $el.children('.lp-launcher-tab');
                queryTab.toggleClass('active', val);

                var queryTabArrow = queryTab.find('.lp-launcher-tab-arrow > i');
                queryTabArrow.toggleClass('lp-icon-cross', val);

                //remove cross icon if already logged in
                if(isLoggedIn)
                    queryTabArrow.removeClass('lp-icon-cross');
            };

            // notify child items about closing a panel
            var activePanel = this.getPanel(UI.areas.filter(function(el) {
                return $(this).hasClass('active');
            }).data('panel'));

            if (activePanel) {
                this._notifyChildren(EVENT_NOTIFY_PANEL_CLOSE, activePanel);
            }


            if (tab && toggle) {
                this._notifyChildren(EVENT_NOTIFY_PANEL_OPEN, panel);
            }

            // remove all active tabs
            fn($tabs, false);

            // toggle tab if passed
            fn($tab, toggle);

        },


        /**
         * Displays a panel given an index or a name. Launcher Container specific.
         * Launcher Container might have several "active" (visible) panels
         *  @param panelId: (string) name or index of the panel to be shown
         */
        showPanel: function(panelId, clicked) {
            var self = this;
            var panel = panelId == null? this.getActivePanel(): this.getPanel(panelId);
            var UI = this._getUI();
            var area, tab;
            var defaultPanel = this.getPreference('defaultPanel');
            var isDefault = defaultPanel && panel && panel.model.name.indexOf(defaultPanel) > -1;
            var isActive, isHidden, reloadContent, fullPanel;
            var $defaultPanel = $(this.getDisplay('default'));

            if (panel) {
                panelId = panel.model.name;
                reloadContent = panel.model.getPreference('reloadContent');

                fullPanel = panel.model.getPreference('fullPanel');
                if(fullPanel && !isMobileDevice() && !isSmallDevice()){
                    $("#fullPanelMain").addClass("full-panel-main");
                    $("#fullPanelTab").addClass("hide-panel-tab");
                }else{
                    $("#fullPanelMain").removeClass("full-panel-main");
                    $("#fullPanelTab").removeClass("hide-panel-tab");
                }

                area = this._getArea(panelId);
                tab = this._getTab(panelId);

                var noChromeTab = tab.find('.lp-lc-tab-inlinewithoutchrome');

                this._loadChildren(panel);

                // toggle open and close for tab other than inlinewithoutchrome
                if (tab.hasClass('lp-launcher-slide') && noChromeTab.length === 0) {
                    tab.toggleClass('lp-launcher-open lp-launcher-close')
                        .addClass('lp-launcher-animating');

                    setTimeout(function() {
                        tab.removeClass('lp-launcher-animating');
                    }, 500);
                } else if (!tab.hasClass('lp-launcher-slide')) {

                    if (tab.children('a.lp-lc-tab-inlinehidden').length > 0) {
                        return;
                    }
                    isActive = area.hasClass('active');
                    isHidden = area.hasClass('lp-launcher-area-mainhidden');

                    //start check active panel
                    //if same panel is toggled twice will return
                    if(previousPanel == panel) {
                        this._toggleTab(tab, true);
                        if(reloadContent){
                            var widgetId = $("[data-widget-title]",area).attr("data-pid");
                            var data = {
                                widgetId:  widgetId
                            }
                           gadgets.pubsub.publish(EVENT_TRIGGER_BEHAVIOR_DETECTION, data); 
                        }
                        return;                        
                    } else
                        previousPanel = panel;
                    //end check active panel

                    if (isDefault || isActive && (!isHidden || isHidden && clicked)) {
                        this._closeActivePanel();

                        if ($defaultPanel.hasClass('lp-launcher-area-fixed')) {
                            setTimeout(function() {
                                $defaultPanel.parent().css('min-height', $defaultPanel.outerHeight());
                            }, 100);
                        }
                    } else {
                        this._toggleTab(tab, true);

                        // After animation is over focus will be returned to the last focused element
                        setTimeout(function() {
                            self._fixOverflow();
                        }, 400);

                        UI.areas.hide().removeClass('active');
                        area.show().addClass('active');
                        if ($defaultPanel.hasClass('lp-launcher-area-fixed')) {
                            $defaultPanel.show();
                        }

                        UI.container.removeClass('lp-launcher-left');
                        self._animateScrollToElement(0);

                        // Update state and URL
                        self.state = panelId;
                        self.pageTitle = panel.model.getPreference('title');
                        self._updateState(self.pageTitle);

                        // Attach keyboard listeners - use document for ie8
                        $(document).on('keydown.launcherKeys', $.proxy(this, '_keydownHandler'));

                        // Fire events
                        // gadgets.pubsub.publish(EVENT_PANEL_LOADED, panelId);
                    }
                }else{
                	this._closeActivePanel();
                }

                setTimeout(function(){
                    //get widget name
                    currentPanel = $("#"+panelId+" [data-pid]").attr("data-pid");
                    currentPanel = currentPanel.substring(0, currentPanel.lastIndexOf("-"))
  
                    //send menu clicked to GA
                    gadgets.pubsub.publish(EVENT_GA_EVENT, {
                        context: currentPanel+".open"
                    });

                    var widgetId = $("[data-widget-title]",area).attr("data-pid");
                    var data = {
                        widgetId:  widgetId
                    }
                    gadgets.pubsub.publish(EVENT_TRIGGER_BEHAVIOR_DETECTION, data);

                },200);

            }
        },

        /**
         * open / close inline tab
         * show / hide title bar in tab
         */
        handleTab: function(currentTarget, clicked) {
            var self = this;
            var noChromeTab = this._getHiddenTitleTab();
            var noChromeTabTitleBar = noChromeTab.children('.side-menu-collapse .am-launcher-tab-hidden');

            var chromeTabTitleBar = noChromeTab.children('.am-launcher-tab');

            // check if clicked is on inlinewithoutchrome (if ancestor of anchor is .am-launcher-tab class)
            // and if inlinewithoutchrome is already collapsed (if elem am-launcher-tab is found)
            // if not do nothing
            if (clicked) {
                if (currentTarget != undefined && currentTarget.closest('.am-launcher-tab').length === 0 && chromeTabTitleBar.length > 0) return;
            }
            var titleTxtSpan = $(this._getUI().left).find('.lp-lc-tab-inlinewithoutchrome').children('.lp-launcher-tab-text');

            if (noChromeTabTitleBar.length > 0) {
                noChromeTabTitleBar.toggleClass('am-launcher-tab-hidden am-launcher-tab'); // close tab
                noChromeTab.toggleClass('list-group-item'); // add list-group-item to li elem
            }

            if (chromeTabTitleBar.length > 0) {
                chromeTabTitleBar.toggleClass('am-launcher-tab-hidden am-launcher-tab'); // open tab
                noChromeTab.toggleClass('list-group-item'); // remove list-group-item from li elem
            }

            // toggle animating class as per original ln307
            if (noChromeTab.hasClass('lp-launcher-slide') && noChromeTab.hasClass('side-menu-collapse')) {
                noChromeTab.toggleClass('lp-launcher-open lp-launcher-close')
                     .addClass('lp-launcher-animating');

                setTimeout(function() {
                    noChromeTab.removeClass('lp-launcher-animating');
                }, 500);
            }

        },


        /**
         * set container height
         * container height = viewport height 
         *					minus navbar height 
         *					and margin-top
         */
        setContainerHeight: function() {
            // browser viewport height
            var windowPortViewHeight = window.innerHeight;

            // AmLauncherDeckContainer root
            var thisContainer = $(this.htmlNode);
            console.log(thisContainer);

            //enable scrollable sidemenu if the sidemenu area too small
            var sideMenuHeight = $(".lp-launcher--tabs .am-mobile-wrapper",thisContainer).height(),
            	headerHeight = $(".lp-navbar-advanced").height(),
            	footerHeight = $(".lp-bb-widget-amb-footer").height();

        	if(sideMenuHeight == 0 || headerHeight == 0 || footerHeight == 0){
	            var heightInterval = setInterval(function(){
	            	sideMenuHeight = $(".lp-launcher--tabs .am-mobile-wrapper",thisContainer).height();
	            	headerHeight = $(".lp-navbar-advanced").height();
	            	footerHeight = $(".lp-bb-widget-amb-footer").height();

	            	if(sideMenuHeight != 0 && headerHeight != 0 && footerHeight != 0){
	            		clearInterval(heightInterval);
	            		if(windowPortViewHeight - sideMenuHeight - headerHeight - footerHeight < 0)
			            	thisContainer.addClass("sidemenu-scrollable");
			            else
			            	thisContainer.removeClass("sidemenu-scrollable");

			            // will select the biggest one between windowPortViewHeight and sideMenuHeight
				        var thisContainerHeight = windowPortViewHeight > sideMenuHeight? windowPortViewHeight : sideMenuHeight;
				        // thisContainer.innerHeight(thisContainerHeight);
                        thisContainer.css("min-height", thisContainerHeight+"px");
	            	}
	            },1000);
	        }else{
		        if(windowPortViewHeight - sideMenuHeight - headerHeight - footerHeight < 0)
	            	thisContainer.addClass("sidemenu-scrollable");
	            else
	            	thisContainer.removeClass("sidemenu-scrollable");
	        }
            //

            // top nav bar height
            var navbar = thisContainer.closest('.bp-manageableArea').siblings('[data-pid^="widget-amb-navbar-advanced"]');
            var navbarHeight = navbar.find('.navbar').outerHeight();

            // AmLauncherDeckContainer margin top
            console.log(thisContainer.css('margin-top'))
            var containerMargin = parseInt(thisContainer.css('margin-top') + thisContainer.css('margin-bottom'));
            console.log('containerMargin', containerMargin)

            // AmLauncherDeckContainer height = viewport height minus navbar and margin-top
            // will select the biggest one between windowPortViewHeight and sideMenuHeight
            var thisContainerHeight = windowPortViewHeight > sideMenuHeight? windowPortViewHeight : sideMenuHeight;
            //thisContainer.innerHeight(thisContainerHeight);
            thisContainer.css("min-height", thisContainerHeight+"px");
        },

        /**
         * Overwrite Deck
         * @return {[type]} [description]
         */

        removePanel: function(id) {
            var self = this;
            var panel = this.getPanel(id);
            panel.model.destroyAndSave(function() {
                self.refreshHTML();
            });
        },

        enhancePreferenceForm: function(ev) {
            ev.stopPropagation();
        },


        getPanel: function(panelId) {
            return (panelId && panelId.model) ? panelId :
                DeckContainer.prototype.getPanel.call(this, panelId);
        },

        /**
         * fix negative margin (view cropping) issue
         */
        _fixOverflow: function() {
            var container = $(this.htmlNode);
            container.css('overflow', 'visible').css('overflow', '');
        },


        _getTab: function(panelId) {
            var ui = this._getUI();
            return $(ui.left).find('[data-panel="' + panelId + '"]');
        },

        _getHiddenTitleTab: function() {
            var ui = this._getUI();
            //return $(ui.left).find('.lp-lc-tab-inlinewithoutchrome').closest('li');
            //excluding all tab in bottom side menu
            return $(ui.left).find('.lp-lc-tab-inlinewithoutchrome').not(".side-menu-bottom .lp-lc-tab-inlinewithoutchrome").closest('li')
        },

        _getArea: function(panelId) {
            var container = $(this.htmlNode);
            return container.find('.lp-launcher-area[data-panel="' + panelId + '"]');
        },

        /**
         * Extend Deck function which provides data for panel creation
         * @param  {object} data Default values
         * @return {object}
         */
        _getNewPanelData: function(data) {
            var order = this._getPanels().length;
            data = data || {};
            return {
                area: data.order || order,
                order: data.order || order,
                id: data.id || this._getNewPanelName(),
                properties: [{
                    name: 'icon',
                    description: '',
                    value: data.icon || 'star',
                    label: 'Icon',
                    viewHint: 'text-input,designModeOnly,manager'
                }, {
                    name: 'customClasses',
                    description: '',
                    value: data.customClasses || '',
                    label: 'Custom Classes',
                    viewHint: 'text-input,designModeOnly,manager'
                }, {
                    name: 'title',
                    label: 'Title',
                    value: data.title || this.PANEL_NAME_PREFIX + (order + 1),
                    viewHint: 'text-input,designModeOnly,manager'
                }, {
                    name: 'panel',
                    label: 'Content (and tab type)',
                    value: data.panel || 'main',
                    viewHint: 'text-input,designModeOnly,manager'
                }, {
                    name: 'sidePanelPosition',
                    label: 'Side panel position',
                    value: data.sidePanelPosition || 'middle',
                    viewHint: 'text-input,designModeOnly,manager'
                }, {
                    type: 'boolean',
                    name: 'loadChildren',
                    label: 'Preload content',
                    value: data.loadChildren || 'false',
                    viewHint: 'checkbox,designModeOnly,manager'
                }, {
                    type: 'boolean',
                    name: 'hideChrome',
                    label: 'Hide Chrome',
                    value: data.hideChrome || 'false',
                    viewHint: 'checkbox,designModeOnly,manager'
                }, {
                    type: 'boolean',
                    name: 'reloadContent',
                    label: 'Reload Content',
                    value: data.reloadContent || 'false',
                    viewHint: 'checkbox,designModeOnly,manager'
                }, {
                    type: 'boolean',
                    name: 'fullPanel',
                    label: 'Full Panel',
                    value: data.fullPanel || 'false',
                    viewHint: 'checkbox,designModeOnly,manager'
                }, {
                    name: 'newIndicator',
                    description: '',
                    value: data.newIndicator || '',
                    label: 'New Menu Indicator',
                    viewHint: 'text-input,designModeOnly,manager'
                }, {
                    type: 'boolean',
                    name: 'hideForNonePilot',
                    label: 'Hide this tab for none Pilot users',
                    value: data.hideForNonePilot || 'false',
                    viewHint: 'checkbox,designModeOnly,manager'
                }]
            };
        },


        /**
         * Overwrite Deck _displayInitialPanel
         * @return {[type]} [description]
         */
        _displayInitialPanel: function() {
            var self = this;
            this.state = this.getPreference('state');
            this.state = this.state || this.getPreference('defaultPanel');

            // If preloading is turned off we need to lazy load visible inline panels
            $.each(this.childNodes || [], function() {
                var type = this.getPreference('panel');
                var loadChildren = this.getPreference('loadChildren');

                var hideForNonePilot = parseBoolean(this.getPreference('hideForNonePilot'));
                var isPilot = parseBoolean(localStorage.getItem("isPilot"));
                if (hideForNonePilot === true && isPilot === false) {
                    if (panelsToHideFromNonePilot.indexOf(this.htmlNode.id) < 0){
                        panelsToHideFromNonePilot.push(this.htmlNode.id);
                    }
                }

                // Trigger loading for panels
                if (type && ['inlinehidden', 'inlineopen', 'inlinewithoutchrome'].indexOf(type) > -1 && loadChildren === false) {
                    self._loadChildren(this);
                }
            });

            // Hiding panels matching panel id in panelsToHideFromNonePilot array
            var sideMenu = $('.am-mobile-wrapper ul.side-menu-middle');
            for (var i=0; i<panelsToHideFromNonePilot.length; i++){
                var liToFind = $('li[data-panel="' + panelsToHideFromNonePilot[i] + '"]');
                sideMenu.find(liToFind).css("display", "none");
            }

            if (this.state === 'true') {
                this.showPanel(this.state);
            }

            // if logged in, toggle logged in css class
            // show default panel 
            var usergrp = b$.portal.loggedInUserGroup;
            if (usergrp.indexOf('user') > -1) {
                var UI = this._getUI();
                var left = $(UI.left);
                // add master class at am-mobile-wrapper div
                left.children().toggleClass('ambank-loggedIn', true);

                // show default panel
                this.showPanel(this.getPreference('initPanel'), true);
                self._toggleLauncherMenu(false);

                if (isSmallDevice)
                    gadgets.pubsub.publish(EVENT_PANEL_OPEN);
            } else {
                this.setContainerHeight();

                // show panel for designated no. of sec
                // shift back focus to login
                if (isSmallDevice) {
                    var advTime = this.getPreference('promoTimeInSeconds');
                    setTimeout(function() {
                        self._toggleLauncherMenu(true);
                        gadgets.pubsub.publish(EVENT_START_TOGGLE_MENU);
                    }, advTime * 1000);
                }
            }

        },

        /**
         * Overwrite Deck updateUrl
         */
        updateUrl: function() {
            // DeckContainer.prototype.updateUrl.call(this);
        },

        _toggleLauncherMenu: function(value) {
            var htmlNode = $(this.htmlNode);
            htmlNode.toggleClass('lp-launcher-left', value);

            if (isSmallDevice() && value && !htmlNode.hasClass('menu-triggered')) {
                $(window).scrollTop(0);
                htmlNode.addClass('menu-triggered');
                setTimeout(function(){
                    htmlNode.removeClass('menu-triggered');
                },500);

                // this._closeActivePanel();
            }  
            gadgets.pubsub.publish('navbar.toggleLauncherMenu', value);    
        },

        _disableLink: function(ev){
            if(ev != undefined)
                ev.preventDefault();
        },


        _closeActivePanel: function(ev) {
            if(ev != undefined){
                ev.preventDefault();
                if($(".lp-icon-cross",ev.currentTarget).length == 0){
                    this._tabClickHandler(ev);
                    return;
                }else{
                    previousPanel = "";
                }
            }

            var UI = this._getUI();
            var needUpdateState = false;
            this._hideOverlay();

            this._toggleTab(null, false);

            if($('.active').length > 0 || this.state == 'false')
                needUpdateState = true;

            UI.areas.hide().removeClass('active');
            $(this.getDisplay('default')).show();

            this.state = null;

            if(needUpdateState)
                this._updateState();

            // Remove keyboard listeners when widget closes
            $(document).off('.launcherKeys');
            this._fixOverflow();

            if (isSmallDevice)
                gadgets.pubsub.publish(EVENT_PANEL_CLOSE);
        },


        /**
         * Publish message with new title for Navbar
         * @private
         */
        _updateState: function(pageTitle) {
            gadgets.pubsub.publish(EVENT_CONTEXT_CHANGED, { newActiveContext: pageTitle || '' });

            // no active panel, toggle inlinewithoutchrome
            //if (!pageTitle && isSmallDevice()) 
            //	this.handleTab();
        },


        /**
         * Update window title
         * @private
         */
        _updateTitle: function(pageTitle) {
            var title = document.getElementsByTagName('title')[0];
            if (title && title.innerText) {
                title.innerText = pageTitle ? pageTitle : 'Home';
            }
        },


        /**
         * Disable dnd
         * @private
         */
        _setDND: function(value) {
            // disable/restore DND behind overlay
            function setDND(vc, val) {
                var parent = vc && vc.parentNode;
                if (parent) {
                    if (!val) {
                        parent.isPossibleDragTargetCache = parent.isPossibleDragTarget;
                    }
                    if (typeof parent.isPossibleDragTargetCache !== 'undefined') {
                        parent.isPossibleDragTarget = val ? parent.isPossibleDragTargetCache : false;
                    }
                    setDND(parent, val);
                }
            }

            // disable/restore DND to the Default panel while other panel is active
            function setDNDChildren(vc, val) {
                var children = vc && vc.childNodes || [];
                if (!val) {
                    vc.isPossibleDragTargetCache = vc.isPossibleDragTarget;
                }
                if (typeof vc.isPossibleDragTargetCache !== 'undefined') {
                    vc.isPossibleDragTarget = val ? vc.isPossibleDragTargetCache : false;
                }

                $.each(children, function() {
                    setDNDChildren(this, val);
                });
            }


            var defaultPanel = this._getDefaultPanel();
            if (defaultPanel) {
                setDNDChildren(defaultPanel, value);
            }

            setDND(this, value);
        },


        /**
         * Show Launcher overlay
         * @private
         */
        _showOverlay: function() {
            if (!this.overlay) {
                var overlay = $('.lp-launcher-overlay');
                this.overlay = overlay.length ? overlay :
                    $('<div class="lp-overlay lp-launcher-overlay" style="display: none;" />').appendTo('#main');
            }
            this.overlay.fadeIn('fast');
            $(this.htmlNode).addClass('lp-launcher-overlay-open');

            // disable dnd for all parent items if overlay is open
            this._setDND(false);
        },

        /**
         * Handle Escape button
         */
        _keydownHandler: function(ev) {
            // need to use keyCode for ie8
            if (ev.keyCode === 27) {

                var notEditable = !isEditable(document.activeElement || ev.target);
                // Close panel only if current element is not editable
                if (notEditable) {
                    this._closeActivePanel();
                }
            }
        },


        /**
         *
         * @private
         */
        _hideOverlay: function() {
            if (this.overlay) {
                this.overlay.fadeOut('fast');
                $(this.htmlNode).removeClass('lp-launcher-overlay-open');
            }
            // restore dnd for parent items
            this._setDND(true);
        },


        /**
         * Scroll to specific element on the page or the value.
         * @param element
         * @private
         */
        _animateScrollToElement: function(el) {
            var top = el ? (typeof el === 'number' ? el : $(el).offset().top) : 0;
            var body = $('html, body');
            var self = this;

            body.css({ scrollLeft: 0 })
                .animate({ scrollTop: top }, 200, 'swing', function() {
                    // it not always scrolls to the top well
                    self._fixOverflow();
                    body.scrollTop(top);
                });
        },

        /**
         * Destroy callback
         */
        destroy: function() {
            this._hideOverlay();
            return DeckContainer.prototype.destroy.call(this);
        },

        /**
         * Owerwrite portalclient to not reshuffle children based on area property
         * @return {[type]} [description]
         */
        insertDisplayChild: function() {}
    }, {
        template: function(json) {
            var data = { item: json.model.originalItem };
            var sTemplate = window['templates_' + this.localName][this.localName](data);
            return sTemplate;
        },
        handlers: {
            'preferencesSaved': function(ev) {
                // console.log('preferencesSaved', ev);
                var isParentLauncher = ev.target.parentNode.nodeName === 'AmLauncherDeckContainer';
                var isPanel = ev.target.nodeName === 'PanelContainer';
                var isLauncher = ev.target.nodeName === 'AmLauncherDeckContainer';
                if (isLauncher || isPanel && isParentLauncher) {
                    ev.currentTarget.refreshHTML(function() {
                        // console.log('done');
                    });
                }
            },
            // 'savePreferenceForm': function(ev){
            // 	console.log('savePreferenceForm', ev);
            // },
            // 'preferenceFormReady': function(ev){
            // 	console.log('preferenceFormReady', ev);
            // },
            'preferences-form': function(ev) {
                console.log('preferences-form', this);


                var prefs, aPrefs,
                    aNewPrefs = [],
                    target = ev.target,
                    panels = [];

                // Extend Panel preference form
                if (target.nodeName === 'PanelContainer') {

                    prefs = target.model.preferences.array;
                    aPrefs = b$.portal.portalModel.filterPreferences(prefs);
                    aNewPrefs = [];

                    $.each(aPrefs, function() {
                        if (this.name === 'panel') {
                            this.inputType.name = 'select-one';
                            this.inputType.options = [
                                { label: 'Side panel (with expanded tab)', value: 'inlineopen' },
                                { label: 'Side panel (expanded tab no chrome)', value: 'inlinewithoutchrome' },
                                { label: 'Side panel (with collapsed tab)', value: 'inline' },
                                { label: 'Side panel (tab without chrome)', value: 'inlinehidden' },
                                { label: 'Main panel (with simple tab)', value: 'main' },
                                { label: 'Main panel (with hidden tab)', value: 'mainhidden' }
                            ];
                        } else if (this.name === 'sidePanelPosition') {
                            this.inputType.name = 'select-one';
                            this.inputType.options = [
                                { label: 'Top', value: 'top' },
                                { label: 'Middle', value: 'middle' },
                                { label: 'Bottom', value: 'bottom' },
                                { label: 'Bottom-desktop', value: 'bottom-desktop' }
                            ];
                        }
                        aNewPrefs.push(this);
                    });

                    ev.detail.customPrefsModel = aNewPrefs;
                }

                // Extend Launcher preference form
                if (target.nodeName === 'AmLauncherDeckContainer') {
                    prefs = target.model.preferences.array;
                    aPrefs = b$.portal.portalModel.filterPreferences(prefs);


                    $.each(target.childNodes, function() {
                        var panel = this;
                        if (panel.model) {
                            panels.push({
                                value: panel.model.name,
                                label: panel.model.getPreference('title')
                            });
                        }
                    });

                    $.each(aPrefs, function() {
                        if (this.name === 'defaultPanel') {
                            this.inputType.name = 'select-one';
                            this.inputType.options = panels;
                        }
                        aNewPrefs.push(this);
                    });

                    ev.detail.customPrefsModel = aNewPrefs;
                }

                console.log(prefs, aPrefs);
            }
        }
    });
})(b$, gadgets, bd, window.jQuery);
