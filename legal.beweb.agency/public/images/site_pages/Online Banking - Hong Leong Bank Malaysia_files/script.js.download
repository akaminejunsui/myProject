/*
 Copyright Vassilis Petroulias [DRDigit]

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
var B64 = {
    alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',
    lookup: null,
    ie: /MSIE /.test(navigator.userAgent),
    ieo: /MSIE [67]/.test(navigator.userAgent),
    encode: function (s) {
        var buffer = B64.toUtf8(s),
            position = -1,
            len = buffer.length,
            nan0, nan1, nan2, enc = [, , , ];
        if (B64.ie) {
            var result = [];
            while (++position < len) {
                nan0 = buffer[position];
                nan1 = buffer[++position];
                enc[0] = nan0 >> 2;
                enc[1] = ((nan0 & 3) << 4) | (nan1 >> 4);
                if (isNaN(nan1))
                    enc[2] = enc[3] = 64;
                else {
                    nan2 = buffer[++position];
                    enc[2] = ((nan1 & 15) << 2) | (nan2 >> 6);
                    enc[3] = (isNaN(nan2)) ? 64 : nan2 & 63;
                }
                result.push(B64.alphabet.charAt(enc[0]), B64.alphabet.charAt(enc[1]), B64.alphabet.charAt(enc[2]), B64.alphabet.charAt(enc[3]));
            }
            return result.join('');
        } else {
            var result = '';
            while (++position < len) {
                nan0 = buffer[position];
                nan1 = buffer[++position];
                enc[0] = nan0 >> 2;
                enc[1] = ((nan0 & 3) << 4) | (nan1 >> 4);
                if (isNaN(nan1))
                    enc[2] = enc[3] = 64;
                else {
                    nan2 = buffer[++position];
                    enc[2] = ((nan1 & 15) << 2) | (nan2 >> 6);
                    enc[3] = (isNaN(nan2)) ? 64 : nan2 & 63;
                }
                result += B64.alphabet[enc[0]] + B64.alphabet[enc[1]] + B64.alphabet[enc[2]] + B64.alphabet[enc[3]];
            }
            return result;
        }
    },
    decode: function (s) {
        if (s.length % 4)
            throw new Error("InvalidCharacterError: 'B64.decode' failed: The string to be decoded is not correctly encoded.");
        var buffer = B64.fromUtf8(s),
            position = 0,
            len = buffer.length;
        if (B64.ieo) {
            var result = [];
            while (position < len) {
                if (buffer[position] < 128)
                    result.push(String.fromCharCode(buffer[position++]));
                else if (buffer[position] > 191 && buffer[position] < 224)
                    result.push(String.fromCharCode(((buffer[position++] & 31) << 6) | (buffer[position++] & 63)));
                else
                    result.push(String.fromCharCode(((buffer[position++] & 15) << 12) | ((buffer[position++] & 63) << 6) | (buffer[position++] & 63)));
            }
            return result.join('');
        } else {
            var result = '';
            while (position < len) {
                if (buffer[position] < 128)
                    result += String.fromCharCode(buffer[position++]);
                else if (buffer[position] > 191 && buffer[position] < 224)
                    result += String.fromCharCode(((buffer[position++] & 31) << 6) | (buffer[position++] & 63));
                else
                    result += String.fromCharCode(((buffer[position++] & 15) << 12) | ((buffer[position++] & 63) << 6) | (buffer[position++] & 63));
            }
            return result;
        }
    },
    toUtf8: function (s) {
        var position = -1,
            len = s.length,
            chr, buffer = [];
        if (/^[\x00-\x7f]*$/.test(s)) while (++position < len)
            buffer.push(s.charCodeAt(position));
        else while (++position < len) {
            chr = s.charCodeAt(position);
            if (chr < 128)
                buffer.push(chr);
            else if (chr < 2048)
                buffer.push((chr >> 6) | 192, (chr & 63) | 128);
            else
                buffer.push((chr >> 12) | 224, ((chr >> 6) & 63) | 128, (chr & 63) | 128);
        }
        return buffer;
    },
    fromUtf8: function (s) {
        var position = -1,
            len, buffer = [],
            enc = [, , , ];
        if (!B64.lookup) {
            len = B64.alphabet.length;
            B64.lookup = {};
            while (++position < len)
                B64.lookup[B64.alphabet.charAt(position)] = position;
            position = -1;
        }
        len = s.length;
        while (++position < len) {
            enc[0] = B64.lookup[s.charAt(position)];
            enc[1] = B64.lookup[s.charAt(++position)];
            buffer.push((enc[0] << 2) | (enc[1] >> 4));
            enc[2] = B64.lookup[s.charAt(++position)];
            if (enc[2] == 64)
                break;
            buffer.push(((enc[1] & 15) << 4) | (enc[2] >> 2));
            enc[3] = B64.lookup[s.charAt(++position)];
            if (enc[3] == 64)
                break;
            buffer.push(((enc[2] & 3) << 6) | enc[3]);
        }
        return buffer;
    }
};
/* DRDigit Base64 encode js (End) */


$(document).ready(function () {
    //PrimeFaces calender first day fix
    PrimeFaces.locales ['en'] = {
        firstDay: 1
    };
    
    $( "#moreread" ).click(function() {
        document.getElementById('morenotice').style.display = 'inline';
        document.getElementById('morecollapse').style.display = 'inline';
        document.getElementById('moreread').style.display = 'none';
    });
    $( "#morecollapse" ).click(function() {
        document.getElementById('morenotice').style.display = 'none';
        document.getElementById('morecollapse').style.display = 'none';
        document.getElementById('moreread').style.display = 'inline';
    });
    
});

$(window).load(function() {
	if (!(self === top))
		loadJS();
});

function clearDataTableSort(id) {
    var a = $("#" + id + " thead tr:nth-child(2) th").siblings();
    a.removeClass("ui-state-selected");
    a.find('.ui-sortable-column-icon').removeClass('ui-icon-triangle-1-s ui-icon-triangle-1-n');
}

var htmlTitle;
var htmlContent;
function cloneElement(targetElem, srcElem) {
    var newElem;
    var elems = srcElem.childNodes;
    for (var i = 0; i < elems.length; i++) {
        var tmpElem = elems[i];
        var tagName = tmpElem.tagName;
        if (!(tagName == 'INPUT'
            || tagName == 'SCRIPT'
            || tagName == 'OPTION'
            || tagName == 'BUTTON'
            || tagName == 'LINK')
            && !(tmpElem.id != null && tmpElem.id.indexOf('ignorePrint') >= 0)
            && !(tmpElem.id != null && tmpElem.id.indexOf('IgnorePrint') >= 0)
            && tmpElem.className != 'ui-messages ui-widget'
            && tmpElem.className != 'ui-messages-info-summary'
            && !(tmpElem.scope != null && tmpElem.scope == 'ignorePrint')) {
            newElem = tmpElem.cloneNode(false);
            if (tagName == 'A') {
                newElem.href = 'javascript: void(0);';
                newElem.setAttribute('ONCLICK', 'void(0);');

            } else if (tagName == 'SELECT') {
                newElem = createDocElement('SPAN', '', '', tmpElem.options[tmpElem.selectedIndex].text);
            }

            targetElem.appendChild(newElem);
            if (tmpElem.childNodes.length > 0) {
                cloneElement(newElem, tmpElem);
            }
        }
    }
}

var disableMobilePDFPrint = false;

function printUnsecureContent(content, requestURI, printType) {
	// to handle in case mobile browser unable to download PDF
	if (disableMobilePDFPrint && isMobileBrowser()) {
		if (document.getElementById('idTitle') != null) {
	        htmlTitle = createDocElement('SPAN', 'htmlTitle', '', '');
	        cloneElement(htmlTitle, document.getElementById('idTitle'));
	        htmlTitle = htmlTitle.innerHTML;
	    }
	
	    if (document.getElementById(content) != null) {
	        htmlContent = createDocElement('SPAN', 'htmlContent', '', '');
	        cloneElement(htmlContent, document.getElementById(content));
	        htmlContent = htmlContent.innerHTML;
	    }
	
	    if (isServletPrint()) {
		    $.ajax({
			   type: "POST",
			   url: contextPath + "/servlet/print",
			   data: {title:encodeURIComponent(htmlTitle),content:encodeURIComponent(htmlContent)},
			   dataType: "text",
			   async: false,
			   success: function() {
				   var w = window.open(contextPath + requestURI, 'printwindow', 'width=1024,height=600,toolbar=1,menubar=1,location=0,status=1,scrollbars=1,resizable=1,left=0,top=0');
				   w.focus();
			   }
			});
	    } else {
	    	popupPrintUnsecureWindow(requestURI);
	    }
	} else {
		printContent(content, printType);
	}
}

function popupPrintUnsecureWindow(requestURI) {
	   var w = window.open(contextPath + requestURI, 'printwindow', 'width=1024,height=600,toolbar=1,menubar=1,location=0,status=1,scrollbars=1,resizable=1,left=0,top=0');
	   w.focus();
}

function printContent(content, printType) {
    if (document.getElementById('idTitle') != null) {
        htmlTitle = createDocElement('SPAN', 'htmlTitle', '', '');
        cloneElement(htmlTitle, document.getElementById('idTitle'));
        htmlTitle = htmlTitle.innerHTML;
    }

    if (document.getElementById(content) != null) {
        htmlContent = createDocElement('SPAN', 'htmlContent', '', '');
        cloneElement(htmlContent, document.getElementById(content));
        htmlContent = htmlContent.innerHTML;
    }

    // to handle in case mobile browser unable to download PDF
    if (disableMobilePDFPrint && isMobileBrowser()) {
	    if (isServletPrint()) {
		    $.ajax({
			   type: "POST",
			   url: contextPath + "/servlet/print",
			   data: {title:base64Encode(htmlTitle),content:base64Encode(htmlContent)},
			   dataType: "text",
			   async: false,
			   success: function() {
				   window.open(contextPath + "/app/fo/print", 'printwindow', 'width=1024,height=600,toolbar=1,menubar=1,location=0,status=1,scrollbars=1,resizable=1,left=0,top=0');
			   }
			});
	    } else {
	    	popupPrintWindow();
	    }
    } else {
		$.ajax({
			type: "POST",
		    url: contextPath + "/servlet/pdf",
		    data: {title:base64Encode(htmlTitle),content:base64Encode(htmlContent),printType:printType},
			dataType: "text",
			async: false,
			success: function(data, response) {
				var result = JSON.parse(data);
				window.open(contextPath + "/servlet/pdf?u=" + result.u, 'printwindow', 'width=1024,height=600,toolbar=0,menubar=1,location=0,status=1,scrollbars=1,resizable=1,left=0,top=0');
			}
		});
    }
}

var htmlContent1;
var htmlContent2;
var htmlContent3;
var htmlContent4;

function printEWill(willType, content1, content2, content3, content4) {
    if (document.getElementById(content1) != null) {
        htmlContent1 = createDocElement('SPAN', 'htmlContent', '', '');
        cloneElement(htmlContent1, document.getElementById(content1));
        htmlContent1 = htmlContent1.innerHTML;
    }
    
    if (document.getElementById(content2) != null) {
        htmlContent2 = createDocElement('SPAN', 'htmlContent', '', '');
        cloneElement(htmlContent2, document.getElementById(content2));
        htmlContent2 = htmlContent2.innerHTML;
    }
    
    if (document.getElementById(content3) != null) {
        htmlContent3 = createDocElement('SPAN', 'htmlContent', '', '');
        cloneElement(htmlContent3, document.getElementById(content3));
        htmlContent3 = htmlContent3.innerHTML;
    }
    
    if (document.getElementById(content4) != null) {
        htmlContent4 = createDocElement('SPAN', 'htmlContent', '', '');
        cloneElement(htmlContent4, document.getElementById(content4));
        htmlContent4 = htmlContent4.innerHTML;
    }

    // to handle in case mobile browser unable to download PDF
    $.ajax({
		type: "POST",
	    url: contextPath + "/servlet/ewill",
	    data: {willType:willType,content1:base64Encode(htmlContent1),content2:base64Encode(htmlContent2),content3:base64Encode(htmlContent3),content4:base64Encode(htmlContent4)},
		dataType: "text",
		async: false,
		success: function() {
			window.open(contextPath + "/servlet/ewill", 'printwindow', 'width=1024,height=600,toolbar=0,menubar=1,location=0,status=1,scrollbars=1,resizable=1,left=0,top=0');
		}
	});
}

function base64Encode (val) {
    if (val == undefined || val == null || val.length === 0)
        return '';
    return B64.encode(val);
}

function popupPrintWindow() {
   var w = window.open(contextPath + "/app/fo/print", 'printwindow', 'width=1024,height=600,toolbar=1,menubar=1,location=0,status=1,scrollbars=1,resizable=1,left=0,top=0');
   w.focus();    		
}

// to use servlet for Receipt Printing
function isServletPrint() {
	return isRestrictedBrowser() || isIE();
}

function isRestrictedBrowser() {
	return navigator.userAgent.match('CriOS');
}

function isIE() {
	return navigator.userAgent.match('MSIE') || navigator.userAgent.match('Trident');
}

function clearPrintContent() {
    if (isServletPrint()) {
	    $.ajax({
		   type: "GET",
		   url: contextPath + "/servlet/print",
		   data: {},
		   success: function(msg){
		   }
		});
    }
}

function showPrintLink() {
    var elem = document.getElementById('printContent');
    var link = document.getElementById('printLink');
    if (elem == null && link != null)
        link.style.display = 'none';
    else if (link != null)
        link.style.display = 'inline';
}

function isElementByName(elem, tagName, tagDisplay) {
    var isExist = elem != null && elem != undefined && elem.tagName == tagName;

    if (isExist && tagDisplay != null && tagDisplay != '')
        isExist = (elem.innerHTML == tagDisplay);

    return isExist;
}

function createDocElement(eleType, eleName, className, innerHTML) {
    var newEle = document.createElement(eleType);
    newEle.id = eleName;
    newEle.name = eleName;
    newEle.className = className;
    newEle.innerHTML = innerHTML;

    return newEle;
}

function createInputElement(eleType, className, inputName, inputType, inputValue) {
    var newEle = document.createElement(eleType);
    newEle.className = className;
    newEle.id = inputName;
    newEle.name = inputName;
    newEle.type = inputType;
    newEle.value = inputValue;

    return newEle;
}

function createHiddenElement(inputName, inputValue) {
    var thisForm = document.forms[0];
    var newEle = createInputElement('input', '', inputName, 'hidden', inputValue);
    thisForm.appendChild(newEle);

    return newEle;
}

function isNotEmpty(obj) {
    return (obj != undefined && obj != null && obj != '');
}

function scrollTo(elementId) {
    var element = document.getElementById(elementId);
    if (element != null) {
        scroll(0, element.offsetTop);
    }
}

function trim(s1) {
    if (s1 == null)
        return null;

    return s1.replace(/^\s+|\s+$/g, "");
}

function isBlank(s1) {
    s1 = trim(s1);
    return s1 == null || s1 == '';
}

function isAlphanumeric(s1) {
    if (isBlank(s1))
        return false;

    return s1.match(/^[0-9a-zA-Z]+$/);
}

function blockContent() {
    try {
        $('#idContainer').block({
            message: null, overlayCSS: { backgroundColor: '#000', opacity: 0 }
        });
    } catch (e) {
    }
}

function unblockContent() {
    try {
        $('#idContainer').unblock();
    } catch (e) {
    }
}

function blockAll() {
    try {
        $.blockUI({
            message: null, overlayCSS: { backgroundColor: '#000', opacity: 0 }
        });
    } catch (e) {
    }
}

function blockElement(elem) {
    try {
        $('#' + elem).block({
            message: null, overlayCSS: { backgroundColor: '#000', opacity: 0 }
        });
    } catch (e) {
    }
}

function unblockElement(elem) {
    try {
        $('#' + elem).unblock();
    } catch (e) {
    }
}

function changeFirstHash() {
    window.location.href += "#";
    setTimeout("changeSecondHash()", "50"); 
}

function changeSecondHash() {
	window.location.href += "1";	
	var storedHash = window.location.hash;
	window.setInterval(function () {if (window.location.hash != storedHash) {window.location.hash = storedHash;}}, 50);
}

function loadJS() {
	changeFirstHash();
}

function loadSecurityTips() {
	$(document).ready(function() {
		$('#panelHandle').hover(function() {
			$('#sidePanel').stop(true, false).animate({
				'right': '0px'
			}, 900);
		});

		$('#sidePanel').hover(function() {
			// Do nothing
		}, function() {

			$('#sidePanel').animate({
				right: '-275px'
			}, 800);

		});

		$('#sidePanel').stop(true, false).animate({
			'right': '0px'
		}, 900);

		var time = 4000;
		var seconds = Math.ceil(time / 1000);

		var interval = null;
		interval = setInterval(function () {
			seconds--;
			if (seconds == 0){
				if (interval != null)
					clearInterval(interval);
				$('#sidePanel').animate({
					right: '-275px'
				}, 800);
			} 
		}, 1000);

	});
}

function getSystemDate(date) {
    try {
        var p = date.split("/");
        return new Date(p[0], p[1]-1, p[2], p[3], p[4], p[5]);
    } catch (e) {
        return new Date();
    }
}

function checkParentStatus(timeoutInSec) {
    try {
        if (!isRestrictedBrowser() && (window.opener == null || window.opener.systemDate == null)) {
            closeWindow();
        } else {
            setAutoCloseTimer(timeoutInSec);
        }
    } catch (e) {
        closeWindow();
    }
}

function setAutoCloseTimer(timeoutInSec) {
    window.setTimeout("checkParentStatus(" + timeoutInSec + ");", timeoutInSec * 1000);
}

function closeWindow() {
    window.open("", "_parent", "");
    window.close();
}

function keepSessionAlive() {
	var random = Math.floor((Math.random()*1000000)+1);
    $.ajax({
    	type: "GET",
    	url: contextPath + "/servlet/session.jsp?" + random,
    	data: {},
    	success: function(msg){
    	}
	});
}

function initProxyCollection() {
	if(window.addEventListener)
    	window.addEventListener('load', ProxyCollector.initProxyCollection, false);
   	else if(window.attachEvent)
    	window.attachEvent('onload', ProxyCollector.initProxyCollection);
   	else
    	window.onload = ProxyCollector.initProxyCollection;

	ProxyCollector.externalIP = '#{request.remoteAddr}';
}

function initEventCollection() {
	if(window.addEventListener)
    	window.addEventListener('load',UIEventCollector.initEventCollection, false);
   	else if(window.attachEvent)
    	window.attachEvent('onload',UIEventCollector.initEventCollection);
   	else
    	window.onload = UIEventCollector.initEventCollection;
}

function captureJsEvent(formName) {
	var vForm = $(formName);
	var vJsEvent = document.createElement("input");
	
	vJsEvent.setAttribute("type", "hidden");
	vJsEvent.setAttribute("name", "idJSEvent");
	vJsEvent.setAttribute("id", "idJSEvent");
	vJsEvent.setAttribute("value", base64Encode(UIEventCollector.serialize()));
	vForm[0].appendChild(vJsEvent);
}

function captureDevicePrint(formName) {
	var vForm = $(formName);
	var vDevicePrint = document.createElement("input");
	
	vDevicePrint.setAttribute("type", "hidden");
	vDevicePrint.setAttribute("name", "idDevicePrint");
	vDevicePrint.setAttribute("id", "idDevicePrint");
	vDevicePrint.setAttribute("value", base64Encode(encode_deviceprint()));
	vForm[0].appendChild(vDevicePrint);
}

function captureDOMElement(formName) {
	var vForm = $(formName);
	var vDomDataCollection = new DomDataCollection();
	var vDomElement = document.createElement("input");
	
	vDomDataCollection.startInspection();
		
	vDomElement.setAttribute("type", "hidden");
	vDomElement.setAttribute("name", "idDOMElement");
	vDomElement.setAttribute("id", "idDOMElement");
	vDomElement.setAttribute("value", base64Encode(vDomDataCollection.domDataAsJSON()));
	vForm[0].appendChild(vDomElement);
}

function checkFraudMonitor(formName, isDOMCapture, isDeviceCapture, isJSEventCapture) {
	
	try {
		if (isDeviceCapture == 'true') {

	    	if (isDOMCapture == 'true') {
				initProxyCollection(formName);
	    	    captureDOMElement(formName);
			}
	    	 
	    	if (isJSEventCapture == 'true') {
				captureJsEvent(formName);
	    	}

	    	captureDevicePrint(formName);
		}
	} catch (e) {
	}
}

function isMobileBrowser() {
	var isMobile = false;
	(function(a){if(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0,4)))isMobile=true;})(navigator.userAgent||navigator.vendor||window.opera);
	return isMobile;
}

(function($) {
    $.fn.clickToggle = function(func1, func2) {
        var funcs = [func1, func2];
        this.data('toggleclicked', 0);
        this.click(function() {
            var data = $(this).data();
            var tc = data.toggleclicked;
            $.proxy(funcs[tc], this)();
            data.toggleclicked = (tc + 1) % 2;
        });
        return this;
    };
}(jQuery));

function repositionPFDialog (dialog) {
	$(dialog).css('left','0');
	var containerWidth = $('#idContainer').innerWidth();
	var width = $(dialog).width();
	var positionCenter = containerWidth/2 - (width/2);
	$(dialog).css('left',positionCenter);
}

function removeCssClass(elem, className) {
	$('#' + elem).removeClass(className);
}

function submitAA() {
	 _satellite.track("Trx_Page");
}